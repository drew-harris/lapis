package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"slices"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/drew-harris/lapis/graph/model"
)

// Logs is the resolver for the logs field.
func (r *playerResolver) Logs(ctx context.Context, obj *model.Player) ([]model.Log, error) {
	if obj.Logs != nil {
		return *obj.Logs, nil
	}

	// Get the logs for a player
	logs := []model.Log{}
	fmt.Println("Extra resolver: getting logs for player")
	r.db.Order("created_at desc").Where("player_id = ?", obj.ID).Find(&logs)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return logs, nil
}

// Saves is the resolver for the saves field.
func (r *playerResolver) Saves(ctx context.Context, obj *model.Player) ([]model.Save, error) {
	if obj.Saves != nil {
		return *obj.Saves, nil
	}

	// Get the logs for a player
	saves := []model.Save{}
	fmt.Println("Extra resolver: getting graphs for player")
	r.db.Order("created_at desc").Where("player_id = ?", obj.ID).Find(&saves)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return saves, nil
}

// Positions is the resolver for the positions field.
func (r *playerResolver) Positions(ctx context.Context, obj *model.Player) ([]model.Position, error) {
	if obj.Positions != nil {
		return *obj.Positions, nil
	}

	// Get the logs for a player
	positions := []model.Position{}
	fmt.Println("Extra resolver: getting graphs for player")
	r.db.Order("created_at desc").Where("player_id = ?", obj.ID).Find(&positions)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return positions, nil
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context, limit *model.LimitFilter) ([]model.Player, error) {
	fields := graphql.CollectAllFields(ctx)
	fmt.Println(strings.Join(fields, " "))

	db := r.db

	if limit != nil {
		if limit.Limit != nil {
			db = db.Limit(*limit.Limit)
		}
		if limit.Page != nil {
			db = db.Offset((*limit.Page - 1) * *limit.Limit)
		}
	}

	if slices.Contains(fields, "logs") {
		fmt.Println("preloading logs")
		db = db.Preload("Logs")
	}
	if slices.Contains(fields, "saves") {
		fmt.Println("preloading saves")
		db = db.Preload("Saves")
	}
	if slices.Contains(fields, "positions") {
		fmt.Println("preloading saves")
		db = db.Preload("Positions")
	}

	players := []model.Player{}
	result := db.Find(&players)

	if result.Error != nil {
		return nil, result.Error
	}

	return players, nil
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, id string) (*model.Player, error) {
	fields := graphql.CollectAllFields(ctx)
	player := model.Player{}
	fmt.Println(strings.Join(fields, " "))

	db := r.db

	if slices.Contains(fields, "logs") {
		fmt.Println("preloading logs")
		db = db.Preload("Logs")
	}

	if slices.Contains(fields, "positions") {
		fmt.Println("preloading logs")
		db = db.Preload("Positions")
	}

	result := db.Where("id = ?", id).First(&player)
	if result.Error != nil {
		return nil, result.Error
	}
	return &player, nil
}

// Player returns PlayerResolver implementation.
func (r *Resolver) Player() PlayerResolver { return &playerResolver{r} }

type playerResolver struct{ *Resolver }
