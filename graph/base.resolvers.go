package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/drew-harris/lapis/graph/model"
)

// Player is the resolver for the player field.
func (r *logResolver) Player(ctx context.Context, obj *model.Log) (*model.Player, error) {
	if obj.Player != nil {
		return obj.Player, nil
	}
	fmt.Println("Using long query")
	player := model.Player{}
	r.db.Where("id = ?", obj.PlayerID).First(&player)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return &player, nil
}

// Logs is the resolver for the logs field.
func (r *playerResolver) Logs(ctx context.Context, obj *model.Player) ([]model.Log, error) {
	if obj.Logs != nil {
		return *obj.Logs, nil
	}

	// Get the logs for a player
	logs := []model.Log{}
	fmt.Println("Extra resolver: getting logs for player")
	r.db.Order("created_at desc").Where("player_id = ?", obj.ID).Find(&logs)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return logs, nil
}

// Log returns LogResolver implementation.
func (r *Resolver) Log() LogResolver { return &logResolver{r} }

// Player returns PlayerResolver implementation.
func (r *Resolver) Player() PlayerResolver { return &playerResolver{r} }

type logResolver struct{ *Resolver }
type playerResolver struct{ *Resolver }
