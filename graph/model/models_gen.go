// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type InputPosition struct {
	Code           string                 `json:"code"`
	ObjectiveID    string                 `json:"objectiveID"`
	Unit           string                 `json:"unit"`
	AdditionalData map[string]interface{} `json:"additionalData,omitempty"`
}

type LimitFilter struct {
	Limit *int `json:"limit,omitempty"`
	Page  *int `json:"page,omitempty"`
}

type LogInput struct {
	Message    *string                `json:"message,omitempty"`
	Type       LogType                `json:"type"`
	Unit       *string                `json:"unit,omitempty"`
	Objective  *string                `json:"objective,omitempty"`
	PlayerName string                 `json:"playerName"`
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

type LogQueryFilter struct {
	PlayerID     *string   `json:"playerId,omitempty"`
	Type         []LogType `json:"type,omitempty"`
	HasAttribute *string   `json:"hasAttribute,omitempty"`
}

type NewCustomNode struct {
	Name       string                 `json:"name"`
	PlayerID   string                 `json:"playerId"`
	GraphData  map[string]interface{} `json:"graphData"`
	RecipeData map[string]interface{} `json:"recipeData"`
}

type NewPlayer struct {
	Name string  `json:"name"`
	ID   *string `json:"id,omitempty"`
}

type NewSave struct {
	Name      string                 `json:"name"`
	PlayerID  string                 `json:"playerId"`
	GraphData map[string]interface{} `json:"graphData"`
}

type LogType string

const (
	LogTypePlaceBlock             LogType = "PlaceBlock"
	LogTypeCollectItems           LogType = "CollectItems"
	LogTypeOpenCraftingTable      LogType = "OpenCraftingTable"
	LogTypeCraftItem              LogType = "CraftItem"
	LogTypeSelectRecipe           LogType = "SelectRecipe"
	LogTypeUseJournal             LogType = "UseJournal"
	LogTypeChestToInventory       LogType = "ChestToInventory"
	LogTypeInventoryToChest       LogType = "InventoryToChest"
	LogTypeOpenFurnace            LogType = "OpenFurnace"
	LogTypeCloseFurnace           LogType = "CloseFurnace"
	LogTypePlaceSign              LogType = "PlaceSign"
	LogTypeOpenContainer          LogType = "OpenContainer"
	LogTypeCloseContainer         LogType = "CloseContainer"
	LogTypeUseItem                LogType = "UseItem"
	LogTypeAdventureStart         LogType = "AdventureStart"
	LogTypeAdventureStop          LogType = "AdventureStop"
	LogTypeEndLevel               LogType = "EndLevel"
	LogTypeDialogueStart          LogType = "DialogueStart"
	LogTypeLSComplete             LogType = "LSComplete"
	LogTypeMFPOpenGraph           LogType = "MFPOpenGraph"
	LogTypeMFPLessonBegin         LogType = "MFPLessonBegin"
	LogTypeMFPNextTask            LogType = "MFPNextTask"
	LogTypeMFPTaskComplete        LogType = "MFPTaskComplete"
	LogTypeMFPAssignmentSubmitted LogType = "MFPAssignmentSubmitted"
	LogTypeMFPConnectNodes        LogType = "MFPConnectNodes"
	LogTypeMFPToggleInfoMode      LogType = "MFPToggleInfoMode"
	LogTypeMFPClearCanvas         LogType = "MFPClearCanvas"
	LogTypeMFPDropNode            LogType = "MFPDropNode"
)

var AllLogType = []LogType{
	LogTypePlaceBlock,
	LogTypeCollectItems,
	LogTypeOpenCraftingTable,
	LogTypeCraftItem,
	LogTypeSelectRecipe,
	LogTypeUseJournal,
	LogTypeChestToInventory,
	LogTypeInventoryToChest,
	LogTypeOpenFurnace,
	LogTypeCloseFurnace,
	LogTypePlaceSign,
	LogTypeOpenContainer,
	LogTypeCloseContainer,
	LogTypeUseItem,
	LogTypeAdventureStart,
	LogTypeAdventureStop,
	LogTypeEndLevel,
	LogTypeDialogueStart,
	LogTypeLSComplete,
	LogTypeMFPOpenGraph,
	LogTypeMFPLessonBegin,
	LogTypeMFPNextTask,
	LogTypeMFPTaskComplete,
	LogTypeMFPAssignmentSubmitted,
	LogTypeMFPConnectNodes,
	LogTypeMFPToggleInfoMode,
	LogTypeMFPClearCanvas,
	LogTypeMFPDropNode,
}

func (e LogType) IsValid() bool {
	switch e {
	case LogTypePlaceBlock, LogTypeCollectItems, LogTypeOpenCraftingTable, LogTypeCraftItem, LogTypeSelectRecipe, LogTypeUseJournal, LogTypeChestToInventory, LogTypeInventoryToChest, LogTypeOpenFurnace, LogTypeCloseFurnace, LogTypePlaceSign, LogTypeOpenContainer, LogTypeCloseContainer, LogTypeUseItem, LogTypeAdventureStart, LogTypeAdventureStop, LogTypeEndLevel, LogTypeDialogueStart, LogTypeLSComplete, LogTypeMFPOpenGraph, LogTypeMFPLessonBegin, LogTypeMFPNextTask, LogTypeMFPTaskComplete, LogTypeMFPAssignmentSubmitted, LogTypeMFPConnectNodes, LogTypeMFPToggleInfoMode, LogTypeMFPClearCanvas, LogTypeMFPDropNode:
		return true
	}
	return false
}

func (e LogType) String() string {
	return string(e)
}

func (e *LogType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogType", str)
	}
	return nil
}

func (e LogType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
