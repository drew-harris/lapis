package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"slices"

	"github.com/99designs/gqlgen/graphql"
	"github.com/drew-harris/lapis/graph/model"
	"github.com/drew-harris/lapis/maps"
	"github.com/google/uuid"
)

// SaveNewPosition is the resolver for the saveNewPosition field.
func (r *mutationResolver) SaveNewPosition(ctx context.Context, input model.InputPosition) (*model.Position, error) {
	player := model.Player{}
	r.db.Where("id = ?", input.Code).First(&player)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	if player.ID == "" {
		return nil, fmt.Errorf("Player id is not valid")
	}

	created := model.Position{
		ID:          uuid.New().String(),
		PlayerID:    input.Code,
		Unit:        input.Unit,
		ObjectiveID: input.ObjectiveID,
	}

	if input.AdditionalData != nil {
		additional, err := maps.FromMap(input.AdditionalData)
		if err != nil {
			return nil, err
		}
		created.AdditionalData = additional
	}

	result := r.db.Create(&created)
	if result.Error != nil {
		return nil, result.Error
	}

	return &created, nil
}

// Player is the resolver for the player field.
func (r *positionResolver) Player(ctx context.Context, obj *model.Position) (*model.Player, error) {
	if obj.Player != nil {
		return obj.Player, nil
	}
	fmt.Println("Using long query")
	player := model.Player{}
	r.db.Where("id = ?", obj.PlayerID).First(&player)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return &player, nil
}

// AdditionalData is the resolver for the additionalData field.
func (r *positionResolver) AdditionalData(ctx context.Context, obj *model.Position) (map[string]interface{}, error) {
	if obj.AdditionalData != nil {
		additional, err := maps.ToMap(obj.AdditionalData)
		if err != nil {
			return nil, err
		}
		return additional, nil
	}
	return nil, nil
}

// Positions is the resolver for the positions field.
func (r *queryResolver) Positions(ctx context.Context) ([]model.Position, error) {
	db := r.db
	fields := graphql.CollectAllFields(ctx)
	if slices.Contains(fields, "player") {
		fmt.Println("preloading player from positions")
		db = db.Preload("Player")
	}

	positions := []model.Position{}

	db.Find(&positions)

	if r.db.Error != nil {
		return nil, r.db.Error
	}

	return positions, nil
}

// MostRecentPosition is the resolver for the mostRecentPosition field.
func (r *queryResolver) MostRecentPosition(ctx context.Context, code string) (*model.Position, error) {
	position := model.Position{}

	r.db.Where("player_id = ?", code).Order("saved_at desc").First(&position)

	if r.db.Error != nil {
		return nil, r.db.Error
	}

	return &position, nil
}

// GetPositionCacheForServer is the resolver for the getPositionCacheForServer field.
func (r *queryResolver) GetPositionCacheForServer(ctx context.Context) ([]model.Position, error) {
	// Fetch the most recent position for each playerid
	db := r.db

	positions := []model.Position{}
	rows, err := db.Raw(`
		WITH RankedData AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY saved_at DESC) AS rnk
    FROM
        positions
)
SELECT
    player_id, id, objective_id, unit, saved_at, additional_data
FROM
    RankedData
WHERE
    rnk = 1;
		`).Rows()

	if err != nil {
		return nil, err
	}

	for rows.Next() {
		position := model.Position{}
		db.ScanRows(rows, &position)
		positions = append(positions, position)
	}

	if r.db.Error != nil {
		return nil, r.db.Error
	}

	return positions, nil
}

// Position returns PositionResolver implementation.
func (r *Resolver) Position() PositionResolver { return &positionResolver{r} }

type positionResolver struct{ *Resolver }
