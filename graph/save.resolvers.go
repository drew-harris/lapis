package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/drew-harris/lapis/graph/model"
	"github.com/drew-harris/lapis/maps"
)

// Player is the resolver for the player field.
func (r *saveResolver) Player(ctx context.Context, obj *model.Save) (*model.Player, error) {
	if obj.Player != nil {
		return obj.Player, nil
	}
	fmt.Println("Using long query")
	player := model.Player{}
	r.db.Where("id = ?", obj.PlayerID).First(&player)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return &player, nil
}

// GraphData is the resolver for the graphData field.
func (r *saveResolver) GraphData(ctx context.Context, obj *model.Save) (map[string]interface{}, error) {
	graphData, err := maps.ToMap(obj.GraphData)
	if err != nil {
		return nil, err
	}
	return graphData, nil
}

// Save returns SaveResolver implementation.
func (r *Resolver) Save() SaveResolver { return &saveResolver{r} }

type saveResolver struct{ *Resolver }
