package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"log"

	"github.com/drew-harris/lapis/graph/model"
	"github.com/drew-harris/lapis/maps"
	"github.com/google/uuid"
)

// GraphData is the resolver for the graphData field.
func (r *customNodeResolver) GraphData(ctx context.Context, obj *model.CustomNode) (map[string]interface{}, error) {
	graphData, err := maps.ToMap(obj.GraphData)
	if err != nil {
		return nil, err
	}
	return graphData, nil
}

// RecipeData is the resolver for the recipeData field.
func (r *customNodeResolver) RecipeData(ctx context.Context, obj *model.CustomNode) (map[string]interface{}, error) {
	graphData, err := maps.ToMap(obj.RecipeData)
	if err != nil {
		return nil, err
	}
	return graphData, nil
}

// CreateNewSave is the resolver for the createNewSave field.
func (r *mutationResolver) CreateNewSave(ctx context.Context, input model.NewSave) (*model.Save, error) {
	// Check if player is valid
	player := model.Player{}
	r.db.Where("id = ?", input.PlayerID).First(&player)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	if player.ID == "" {
		return nil, fmt.Errorf("Player id is not valid")
	}

	graphDataJson, err := maps.FromMap(input.GraphData)
	fmt.Println("GRAPH DATA JSON: ", graphDataJson.String())
	if err != nil {
		return nil, err
	}

	created := model.Save{
		ID:        uuid.New().String(),
		Name:      input.Name,
		PlayerID:  player.ID,
		GraphData: graphDataJson,
	}

	result := r.db.Create(&created)

	if result.Error != nil {
		return nil, result.Error
	}

	return &created, nil
}

// UpdateSave is the resolver for the updateSave field.
func (r *mutationResolver) UpdateSave(ctx context.Context, id string, graphData map[string]interface{}) (*model.Save, error) {
	graphDataJson, err := maps.FromMap(graphData)
	if err != nil {
		return nil, err
	}
	save := model.Save{}
	r.db.Where("id = ?", id).First(&save)

	save.GraphData = graphDataJson

	r.db.Save(&save)
	if r.db.Error != nil {
		return nil, r.db.Error
	}

	return &save, nil
}

// DeleteSave is the resolver for the deleteSave field.
func (r *mutationResolver) DeleteSave(ctx context.Context, id string) (bool, error) {
	r.db.Where("id = ?", id).Delete(&model.Save{})

	if r.db.Error != nil {
		return false, r.db.Error
	}

	return true, nil
}

// CreateCustomNode is the resolver for the createCustomNode field.
func (r *mutationResolver) CreateCustomNode(ctx context.Context, input model.NewCustomNode) (*model.CustomNode, error) {
	log.Println("Creating custom node")
	player := model.Player{}
	r.db.Where("id = ?", input.PlayerID).First(&player)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	if player.ID == "" {
		return nil, fmt.Errorf("Player id is not valid")
	}

	graphDataJson, err := maps.FromMap(input.GraphData)
	fmt.Println("GRAPH DATA JSON: ", graphDataJson.String())
	if err != nil {
		return nil, err
	}
	recipeDataJson, err := maps.FromMap(input.RecipeData)
	fmt.Println("GRAPH DATA JSON: ", recipeDataJson.String())
	if err != nil {
		return nil, err
	}

	created := model.CustomNode{
		ID:         uuid.New().String(),
		Name:       input.Name,
		PlayerID:   player.ID,
		GraphData:  graphDataJson,
		RecipeData: recipeDataJson,
	}

	result := r.db.Create(&created)

	if result.Error != nil {
		return nil, result.Error
	}

	return &created, nil
}

// Saves is the resolver for the saves field.
func (r *queryResolver) Saves(ctx context.Context, playerID *string) ([]model.Save, error) {
	saves := []model.Save{}
	db := r.db
	if playerID != nil {
		db = db.Where("player_id = ?", *playerID)
	}
	db.Find(&saves)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return saves, nil
}

// Save is the resolver for the save field.
func (r *queryResolver) Save(ctx context.Context, id string) (*model.Save, error) {
	save := model.Save{}
	r.db.Where("id = ?", id).First(&save)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return &save, nil
}

// Player is the resolver for the player field.
func (r *saveResolver) Player(ctx context.Context, obj *model.Save) (*model.Player, error) {
	if obj.Player != nil {
		return obj.Player, nil
	}
	fmt.Println("Using long query")
	player := model.Player{}
	r.db.Where("id = ?", obj.PlayerID).First(&player)
	if r.db.Error != nil {
		return nil, r.db.Error
	}
	return &player, nil
}

// GraphData is the resolver for the graphData field.
func (r *saveResolver) GraphData(ctx context.Context, obj *model.Save) (map[string]interface{}, error) {
	graphData, err := maps.ToMap(obj.GraphData)
	if err != nil {
		return nil, err
	}
	return graphData, nil
}

// CustomNode returns CustomNodeResolver implementation.
func (r *Resolver) CustomNode() CustomNodeResolver { return &customNodeResolver{r} }

// Save returns SaveResolver implementation.
func (r *Resolver) Save() SaveResolver { return &saveResolver{r} }

type customNodeResolver struct{ *Resolver }
type saveResolver struct{ *Resolver }
